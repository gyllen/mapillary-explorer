cameras:
    camera1:
        type: perspective
        vanishing_point: [-.25, -.75]
    camera2:
        type: isometric
        axis: [.0, 1.]
        active: true

lights:
    light1:
        type: directional
        diffuse: 1
        ambient: .35

sources:
    mapillary:
        type: MVT
        url:  //d2munx5tg0hw47.cloudfront.net/tiles/{z}/{x}/{y}.mapbox
        max_zoom: 14
    osm:
        type: GeoJSONTiles
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.json?api_key=vector-tiles-HqUVidw

layers:
    earth:
        data: { source: osm }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            polygons:
                order: 0
                color: [.5, .5, .5]

    water:
        data: { source: osm }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            polygons:
                order: 2
                color: [.4, .4, .4]
            lines:
                order: 3
                color: [.5, .5, .5]
                width: 1px

    roads:
        data: { source: osm }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            lines:
                interactive: true
                order: 2
                color: '#bbb'
                width: 1px
        red:
            filter: |
                function () {
                    return feature[properties.key_text] && feature[properties.key_text].toLowerCase().indexOf(properties.value_text.toLowerCase()) > -1;
                }
            draw:
                lines:
                    order: 100
                    color: red
                    width: 2px
                text:
                    order: 100
                    text_source: name
                    font:
                        typeface: 8pt Lucida Grande
                        fill: white
                        stroke: { color: black, width: 4 }

    buildings:
        data: { source: osm }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            polygons:
                order: 4
                color: '#888'
        red:
            filter: |
                function () {
                    return feature[properties.key_text] && feature[properties.key_text].toLowerCase().indexOf(properties.value_text.toLowerCase()) > -1;
                }
            draw:
                lines:
                    order: 100
                    color: red
                    width: 3px
                text:
                    order: 100
                    text_source: name
                    font:
                        typeface: 8pt Lucida Grande
                        fill: white

    places:
        data: { source: osm }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            points:
                order: 11
                color: '#888'
                size: 10px
            text:
                order: 12
                text_source: name
                font:
                    typeface: 8pt Helvetica
                    fill: '#ccc'

    mapillary-sequences:
        data: { source: mapillary }
        properties: 
            key_text: ""
            value_text: ""
            ceiling: 1.
            floor: 0
        draw:
            lines:
                interactive: true
                order: 99
                # color: blue
                color: |
                    function() {
                        if (properties.key_text != "" || properties.value_text != "") return [.5, .5, .5];
                        function HSVtoRGB(h, s, v) {
                            var r, g, b, i, f, p, q, t;
                            i = Math.floor(h * 6);
                            f = h * 6 - i;
                            p = v * (1 - s);
                            q = v * (1 - f * s);
                            t = v * (1 - (1 - f) * s);
                            switch (i % 6) {
                                case 0: r = v, g = t, b = p; break;
                                case 1: r = q, g = v, b = p; break;
                                case 2: r = p, g = v, b = t; break;
                                case 3: r = p, g = q, b = v; break;
                                case 4: r = t, g = p, b = v; break;
                                case 5: r = v, g = p, b = q; break;
                            }
                            return [r, g, b];
                        }

                        var t = feature.captured_at;
                        var min = 946667339334 
                        var max = 1436400393000
                        var ceiling = properties.ceiling;
                        var floor = properties.floor;

                        var v = ((ceiling - floor) * (t - min))/(max - min) + floor;
                        return HSVtoRGB(1/v, 1, 1);
                    }
                width: 3px
            text:
                order: 100
                text_source: username
                font:
                    typeface: 8pt Helvetica
                    fill: white
                    stroke: { color: black, width: 2 }
        red:
            filter: |
                function () {
                    return feature[properties.key_text] && feature[properties.key_text].toLowerCase().indexOf(properties.value_text.toLowerCase()) > -1;
                }
            draw:
                lines:
                    order: 100
                    color: red
                    width: 5px
                text:
                    order: 100
                    text_source: username
                    font:
                        typeface: 8pt Helvetica
                        fill: white
                        stroke: { color: black, width: 2 }